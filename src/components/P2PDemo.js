import React, { useState, useEffect } from 'react';
import peerService from '../services/PeerService';
import useDeviceCode from '../hooks/useDeviceCode';
import Modal from 'react-modal';
import SyncManager from './SyncManager';
import DeviceSelectionModal from './DeviceSelectionModal';
import DeviceService from '../services/DeviceService';
import StorageStatus from './StorageStatus';

// ËÆæÁΩÆModalÁöÑÂ∫îÁî®Ê†πÂÖÉÁ¥†
if (typeof document !== 'undefined') {
  Modal.setAppElement('#root');
}

const P2PDemo = ({ isModalMode = false, isOpen = false, onRequestClose }) => {
  const deviceCode = useDeviceCode();
  const [isInitialized, setIsInitialized] = useState(false);
  const [connectedDevices, setConnectedDevices] = useState([]);
  const [targetDeviceCode, setTargetDeviceCode] = useState('');
  const [status, setStatus] = useState('Êú™ËøûÊé•');
  const [showP2PModal, setShowP2PModal] = useState(false);
  const [selectedDevice, setSelectedDevice] = useState(null);
  const [showDeviceSelection, setShowDeviceSelection] = useState(false);
  const [showSyncManager, setShowSyncManager] = useState(false);
  const [historyDevices, setHistoryDevices] = useState([]);

  useEffect(() => {
    if (!deviceCode) return;

    const initializePeer = async () => {
      try {
        setStatus('Ê≠£Âú®ÂàùÂßãÂåñ...');
        await peerService.initialize(deviceCode);
        setIsInitialized(true);
        setStatus('Â∑≤ËøûÊé•');
        
        // Êõ¥Êñ∞ËøûÊé•ÁöÑËÆæÂ§áÂàóË°®
        updateConnectedDevices();
      } catch (error) {
        console.error('ÂàùÂßãÂåñP2PÂ§±Ë¥•:', error);
        setStatus(`ÂàùÂßãÂåñÂ§±Ë¥•: ${error.message}`);
      }
    };

    initializePeer();

    // ËÆæÁΩÆËøûÊé•Áä∂ÊÄÅÂ§ÑÁêÜÂô®
    const removeConnectionHandler = peerService.onConnection((status, connectedDeviceCode) => {
      updateConnectedDevices();
    });

    return () => {
      removeConnectionHandler();
      peerService.destroy();
    };
  }, [deviceCode]);

  // Âä†ËΩΩÂéÜÂè≤ËÆæÂ§áÔºàÊéíÈô§ÂΩìÂâçËÆæÂ§áÔºâ
  useEffect(() => {
    const loadHistoryDevices = async () => {
      try {
        const deviceCodes = await DeviceService.getConnectedDeviceCodes();
        // ÊéíÈô§ÂΩìÂâçËÆæÂ§áÁ†Å
        const filteredDevices = deviceCodes.filter(code => code !== deviceCode);
        setHistoryDevices(filteredDevices);
      } catch (error) {
        console.error('Âä†ËΩΩÂéÜÂè≤ËÆæÂ§áÂ§±Ë¥•:', error);
      }
    };

    if ((isOpen || !isModalMode) && deviceCode) {
      loadHistoryDevices();
    }
  }, [isOpen, isModalMode, deviceCode]);

  const updateConnectedDevices = () => {
    setConnectedDevices(peerService.getConnectedDevices());
  };

  const handleConnect = async (deviceCodeParam = null) => {
    const codeToConnect = deviceCodeParam || targetDeviceCode.trim();

    if (!codeToConnect) {
      alert('ËØ∑ËæìÂÖ•ËÆæÂ§á‰ª£Á†ÅÊàñÈÄâÊã©ÂéÜÂè≤ËÆæÂ§á');
      return;
    }

    // È™åËØÅ6‰ΩçÊï∞Â≠óÊ†ºÂºè
    if (!/^\d{6}$/.test(codeToConnect)) {
      alert('ËÆæÂ§á‰ª£Á†ÅÂøÖÈ°ªÊòØ6‰ΩçÊï∞Â≠ó');
      return;
    }

    try {
      setStatus('Ê≠£Âú®ËøûÊé•...');
      
      await peerService.connectToDevice(codeToConnect);
      
      setStatus('Â∑≤ËøûÊé•');
      setTargetDeviceCode('');
      updateConnectedDevices();
    } catch (error) {
      console.error('ËøûÊé•Â§±Ë¥•:', error);
      setStatus(`ËøûÊé•Â§±Ë¥•: ${error.message}`);
      alert(`ËøûÊé•Â§±Ë¥•: ${error.message}`);
    }
  };

  const handleDisconnect = (targetCode) => {
    peerService.disconnectFromDevice(targetCode);
    updateConnectedDevices();
  };

  // Â§ÑÁêÜÂêåÊ≠•ÊåâÈíÆÁÇπÂáª - ÂÖàÊòæÁ§∫ËÆæÂ§áÈÄâÊã©ÂºπÁ™ó
  const handleSyncClick = () => {
    setShowDeviceSelection(true);
  };

  // Â§ÑÁêÜËÆæÂ§áÈÄâÊã©
  const handleDeviceSelect = async (device) => {
    setSelectedDevice(device);
    setShowDeviceSelection(false);
    
    // Â¶ÇÊûúÈÄâÊã©ÁöÑÊòØÂú®Á∫øËÆæÂ§áÔºåÁõ¥Êé•ÂºÄÂßãÂêåÊ≠•
    if (device.is_online) {
      setShowSyncManager(true);
    } else {
      // Â¶ÇÊûúÊòØÂéÜÂè≤ËÆæÂ§áÔºåÂè™ËøûÊé•Ôºå‰∏çËá™Âä®ÂºÄÂßãÂêåÊ≠•
      try {
        setStatus('Ê≠£Âú®ËøûÊé•...');
        await handleConnect(device.device_code);
        // ËøûÊé•ÊàêÂäüÔºå‰ΩÜ‰∏çËá™Âä®ÊâìÂºÄÂêåÊ≠•ÁÆ°ÁêÜÂô®
        // Áî®Êà∑ÂèØ‰ª•Á®çÂêéÊâãÂä®ÁÇπÂáª"ÂºÄÂßãÂêåÊ≠•"
      } catch (error) {
        console.error('ËøûÊé•ËÆæÂ§áÂ§±Ë¥•:', error);
        setStatus(`ËøûÊé•Â§±Ë¥•: ${error.message}`);
      }
    }
  };

  // ÂÖ≥Èó≠ËÆæÂ§áÈÄâÊã©ÂºπÁ™ó
  const handleDeviceSelectionClose = () => {
    setShowDeviceSelection(false);
  };

  // ÂÖ≥Èó≠ÂêåÊ≠•ÁÆ°ÁêÜÂô®
  const handleSyncManagerClose = () => {
    setShowSyncManager(false);
    setSelectedDevice(null);
    
    // Â¶ÇÊûúÊòØÊ®°ÊÄÅÊ°ÜÊ®°ÂºèÔºà‰ªéApp.jsË∞ÉÁî®ÔºâÔºåÂÖ≥Èó≠Êó∂Âà∑Êñ∞È°µÈù¢
    if (onRequestClose) {
      onRequestClose();
      // Âª∂ËøüÂà∑Êñ∞ÔºåÁ°Æ‰øùÊ®°ÊÄÅÊ°ÜÂÆåÂÖ®ÂÖ≥Èó≠
      setTimeout(() => {
        window.location.reload();
      }, 100);
    }
  };

  // ÂÖ≥Èó≠P2PÈÄö‰ø°Ê®°ÊÄÅÊ°Ü
  const handleP2PModalClose = () => {
    setShowP2PModal(false);
    
    // Â¶ÇÊûúÊòØÊ®°ÊÄÅÊ°ÜÊ®°ÂºèÔºà‰ªéApp.jsË∞ÉÁî®ÔºâÔºåÂÖ≥Èó≠Êó∂Âà∑Êñ∞È°µÈù¢
    if (onRequestClose) {
      onRequestClose();
      // Âª∂ËøüÂà∑Êñ∞ÔºåÁ°Æ‰øùÊ®°ÊÄÅÊ°ÜÂÆåÂÖ®ÂÖ≥Èó≠
      setTimeout(() => {
        window.location.reload();
      }, 100);
    }
  };

  // ‰ºòÂåñÁöÑÊ†∑Âºè
  const containerStyle = {
    fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
    padding: '24px',
    maxWidth: '600px',
    margin: '0 auto',
    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
    minHeight: '100vh'
  };

  const headerStyle = {
    textAlign: 'center',
    marginBottom: '32px',
    padding: '24px',
    backgroundColor: 'rgba(255, 255, 255, 0.95)',
    borderRadius: '16px',
    border: 'none',
    boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
    backdropFilter: 'blur(10px)'
  };

  const sectionStyle = {
    marginBottom: '24px',
    padding: '24px',
    backgroundColor: 'rgba(255, 255, 255, 0.95)',
    borderRadius: '16px',
    border: 'none',
    boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
    backdropFilter: 'blur(10px)'
  };

  const deviceCardStyle = {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
    padding: '16px 20px',
    margin: '8px',
    backgroundColor: '#4285f4',
    color: 'white',
    borderRadius: '12px',
    border: 'none',
    cursor: 'pointer',
    transition: 'all 0.3s ease',
    minWidth: '100px',
    boxShadow: '0 4px 16px rgba(66, 133, 244, 0.3)',
    fontSize: '16px',
    fontWeight: '500'
  };

  const inputStyle = {
    width: '100%',
    padding: '16px 20px',
    border: '2px solid #e8eaed',
    borderRadius: '12px',
    fontSize: '18px',
    fontFamily: 'monospace',
    textAlign: 'center',
    letterSpacing: '2px',
    backgroundColor: 'white',
    transition: 'border-color 0.3s ease',
    marginBottom: '16px'
  };

  const buttonStyle = {
    padding: '16px 32px',
    backgroundColor: '#4285f4',
    color: 'white',
    border: 'none',
    borderRadius: '12px',
    cursor: 'pointer',
    fontSize: '16px',
    fontWeight: '600',
    transition: 'all 0.3s ease',
    boxShadow: '0 4px 16px rgba(66, 133, 244, 0.3)',
    width: '100%'
  };

  // Â¶ÇÊûúÊòØÊ®°ÊÄÅÊ°ÜÊ®°ÂºèÔºåÊ∏≤ÊüìÊ®°ÊÄÅÊ°Ü
  if (isModalMode) {
    return (
      <Modal 
        isOpen={isOpen} 
        onRequestClose={handleP2PModalClose}
        style={{
          overlay: {
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0, 0, 0, 0.6)',
            zIndex: 1000,
            backdropFilter: 'blur(4px)'
          },
          content: {
            position: 'relative',
            top: '50%',
            left: '50%',
            right: 'auto',
            bottom: 'auto',
            marginRight: '-50%',
            transform: 'translate(-50%, -50%)',
            width: '90%',
            maxWidth: '700px',
            maxHeight: '90vh',
            padding: '0',
            border: 'none',
            borderRadius: '16px',
            backgroundColor: 'white',
            boxShadow: '0 20px 40px rgba(0, 0, 0, 0.15)'
          }
        }}
        contentLabel="P2PËÆæÂ§áÂêåÊ≠•"
      >
        <div style={{display: 'flex', flexDirection: 'column', height: '100%'}}>
          <div style={{
            display: 'flex', 
            justifyContent: 'space-between', 
            alignItems: 'center',
            padding: '24px 32px',
            borderBottom: '1px solid #e8eaed'
          }}>
            <h3 style={{margin: 0, color: '#333', fontSize: '20px', fontWeight: '600'}}>üì± ËÆæÂ§áÂêåÊ≠•</h3>
            <button 
              onClick={handleP2PModalClose}
              style={{
                background: 'none',
                border: 'none',
                fontSize: '24px',
                color: '#666',
                cursor: 'pointer',
                padding: '8px',
                lineHeight: 1,
                borderRadius: '8px',
                transition: 'background-color 0.2s'
              }}
              onMouseOver={(e) => e.target.style.backgroundColor = '#f1f3f4'}
              onMouseOut={(e) => e.target.style.backgroundColor = 'transparent'}
            >
              ‚úï
            </button>
          </div>
          <div style={{
            flex: 1,
            overflowY: 'auto'
          }}>
            {connectedDevices.length > 0 ? (
              <SyncManager 
                connectedDevices={connectedDevices}
                onClose={handleP2PModalClose}
              />
            ) : (
              <div style={{padding: '32px'}}>
            <P2PInnerContent 
              deviceCode={deviceCode}
              isInitialized={isInitialized}
              connectedDevices={connectedDevices}
              targetDeviceCode={targetDeviceCode}
              setTargetDeviceCode={setTargetDeviceCode}
              status={status}
              handleConnect={handleConnect}
              handleDisconnect={handleDisconnect}
                  historyDevices={historyDevices}
            />
              </div>
            )}
          </div>
        </div>
      </Modal>
    );
  }

  return (
    <div style={containerStyle}>
      {/* Ê†áÈ¢òÂíåÁä∂ÊÄÅ */}
      <div style={headerStyle}>
        <h2 style={{margin: '0 0 16px 0', color: '#333', fontSize: '24px', fontWeight: '700'}}>üì± ËÆæÂ§áÂêåÊ≠•ÁÆ°ÁêÜ</h2>
        <div style={{fontSize: '16px', color: '#5f6368', marginBottom: '8px'}}>
          ÂΩìÂâçËÆæÂ§á‰ª£Á†Å: <span style={{fontFamily: 'monospace', fontSize: '18px', fontWeight: '600', color: '#4285f4'}}>{deviceCode || 'Âä†ËΩΩ‰∏≠...'}</span>
        </div>
        <div style={{fontSize: '14px', color: connectedDevices.length > 0 ? '#137333' : '#ea4335', fontWeight: '500'}}>
          ËøûÊé•Áä∂ÊÄÅ: {status}
        </div>
      </div>

      {/* ËøûÊé•ËÆæÂ§á */}
      <div style={sectionStyle}>
        <h3 style={{marginTop: 0, marginBottom: '24px', color: '#333', fontSize: '18px', fontWeight: '600'}}>üîó ËÆæÂ§áËøûÊé•</h3>
        
        {/* ÂéÜÂè≤ËÆæÂ§áÂç°Áâá */}
        {historyDevices.length > 0 && (
          <div style={{marginBottom: '32px'}}>
            <h4 style={{margin: '0 0 16px 0', color: '#5f6368', fontSize: '14px', fontWeight: '500', textAlign: 'center'}}>
              ÂéÜÂè≤ËøûÊé•ËÆæÂ§á
            </h4>
                         <div style={{
               display: 'flex',
               flexWrap: 'wrap',
               justifyContent: 'center',
               gap: '12px',
               marginBottom: '24px'
             }}>
               {historyDevices.map((code) => (
                 <button
                   key={code}
                   onClick={() => handleConnect(code)}
                   style={{
                     ...deviceCardStyle,
                     opacity: isInitialized ? 1 : 0.5
                   }}
                   disabled={!isInitialized}
                   onMouseOver={(e) => {
                     if (isInitialized) {
                       e.target.style.backgroundColor = '#3367d6';
                       e.target.style.transform = 'translateY(-2px)';
                       e.target.style.boxShadow = '0 6px 20px rgba(66, 133, 244, 0.4)';
                     }
                   }}
                   onMouseOut={(e) => {
                     e.target.style.backgroundColor = '#4285f4';
                     e.target.style.transform = 'translateY(0px)';
                     e.target.style.boxShadow = '0 4px 16px rgba(66, 133, 244, 0.3)';
                   }}
                 >
                   <div style={{fontFamily: 'monospace', fontSize: '18px', fontWeight: '600'}}>{code}</div>
                 </button>
               ))}
            </div>
            <div style={{textAlign: 'center', color: '#5f6368', fontSize: '12px', marginBottom: '24px'}}>
              ÊàñËÄÖÊâãÂä®ËæìÂÖ•ËÆæÂ§á‰ª£Á†Å
            </div>
          </div>
        )}

        {/* ÊâãÂä®ËæìÂÖ•Âå∫Âüü */}
        <div style={{textAlign: 'center'}}>
          <input
            type="text"
            placeholder="ËØ∑ËæìÂÖ•6‰ΩçËÆæÂ§á‰ª£Á†Å"
            value={targetDeviceCode}
            onChange={(e) => setTargetDeviceCode(e.target.value)}
            style={{
              ...inputStyle,
              borderColor: targetDeviceCode ? '#4285f4' : '#e8eaed'
            }}
            maxLength={6}
            pattern="[0-9]{6}"
            onKeyPress={(e) => e.key === 'Enter' && handleConnect()}
            onFocus={(e) => e.target.style.borderColor = '#4285f4'}
            onBlur={(e) => e.target.style.borderColor = targetDeviceCode ? '#4285f4' : '#e8eaed'}
          />
          <button 
            onClick={() => handleConnect()} 
            style={{
              ...buttonStyle,
              opacity: isInitialized ? 1 : 0.5
            }}
            disabled={!isInitialized}
            onMouseOver={(e) => {
              if (isInitialized) {
                e.target.style.backgroundColor = '#3367d6';
                e.target.style.transform = 'translateY(-2px)';
              }
            }}
            onMouseOut={(e) => {
              e.target.style.backgroundColor = '#4285f4';
              e.target.style.transform = 'translateY(0px)';
            }}
          >
            {isInitialized ? 'ËøûÊé•ËÆæÂ§á' : 'ÂàùÂßãÂåñ‰∏≠...'}
          </button>
        </div>
      </div>

      {/* Â∑≤ËøûÊé•ÁöÑËÆæÂ§á */}
      {connectedDevices.length > 0 && (
        <div style={sectionStyle}>
          <h3 style={{marginTop: 0, marginBottom: '20px', color: '#333', fontSize: '18px', fontWeight: '600'}}>
            üì° Â∑≤ËøûÊé•ËÆæÂ§á ({connectedDevices.length})
          </h3>
          <div style={{display: 'flex', flexWrap: 'wrap', gap: '12px'}}>
            {connectedDevices.map((deviceCode) => (
              <div key={deviceCode} style={{
                display: 'flex',
                alignItems: 'center',
                padding: '12px 16px',
                backgroundColor: '#e8f5e8',
                border: '2px solid #137333',
                borderRadius: '12px',
                fontSize: '16px'
              }}>
                <span style={{fontFamily: 'monospace', fontWeight: '600', color: '#137333', marginRight: '12px'}}>
                  {deviceCode}
                </span>
                <button 
                  onClick={() => handleDisconnect(deviceCode)}
                  style={{
                    background: 'none',
                    border: 'none',
                    color: '#ea4335',
                    cursor: 'pointer',
                    fontSize: '16px',
                    padding: '4px',
                    borderRadius: '4px',
                    transition: 'background-color 0.2s'
                  }}
                  onMouseOver={(e) => e.target.style.backgroundColor = 'rgba(234, 67, 53, 0.1)'}
                  onMouseOut={(e) => e.target.style.backgroundColor = 'transparent'}
                >
                  ‚úï
                </button>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* ÂõæÂ∫ìÂêåÊ≠•ÂäüËÉΩ */}
        <div style={sectionStyle}>
        <h3 style={{marginTop: 0, marginBottom: '16px', color: '#333', fontSize: '18px', fontWeight: '600'}}>üìÅ ÂõæÂ∫ìÂêåÊ≠•</h3>
        <p style={{marginBottom: '24px', fontSize: '14px', color: '#5f6368', lineHeight: '1.5'}}>
          ÈÄöËøáP2PËøûÊé•ËøõË°åËÆæÂ§áÂêåÊ≠•Ôºå‰º†ËæìÊï∞ÊçÆÂ∫ìÂíåÂõæÁâáÊñá‰ª∂
        </p>
          <button 
          onClick={handleSyncClick}
          style={{
            ...buttonStyle,
            backgroundColor: '#137333'
          }}
          onMouseOver={(e) => {
            e.target.style.backgroundColor = '#0d652d';
            e.target.style.transform = 'translateY(-2px)';
            e.target.style.boxShadow = '0 6px 20px rgba(19, 115, 51, 0.4)';
          }}
          onMouseOut={(e) => {
            e.target.style.backgroundColor = '#137333';
            e.target.style.transform = 'translateY(0px)';
            e.target.style.boxShadow = '0 4px 16px rgba(19, 115, 51, 0.3)';
          }}
          >
          üîÑ ÂºÄÂßãÂêåÊ≠•
        </button>
      </div>

      {/* ËÆæÂ§áÈÄâÊã©ÂºπÁ™ó */}
      <DeviceSelectionModal
        isOpen={showDeviceSelection}
        onClose={handleDeviceSelectionClose}
        onSelectDevice={handleDeviceSelect}
      />
      
      {/* ÂêåÊ≠•ÁÆ°ÁêÜÂô®ÂºπÁ™ó */}
            {showSyncManager && selectedDevice && (
        <Modal
          isOpen={showSyncManager}
          onRequestClose={handleSyncManagerClose}
          style={{
            overlay: {
              position: 'fixed',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              backgroundColor: 'rgba(0, 0, 0, 0.6)',
              zIndex: 1000,
              backdropFilter: 'blur(4px)'
            },
            content: {
              position: 'relative',
              top: '50%',
              left: '50%',
              right: 'auto',
              bottom: 'auto',
              marginRight: '-50%',
              transform: 'translate(-50%, -50%)',
              width: '90%',
              maxWidth: '700px',
              maxHeight: '90vh',
              padding: '0',
              border: 'none',
              borderRadius: '16px',
              backgroundColor: 'white',
              boxShadow: '0 20px 40px rgba(0, 0, 0, 0.15)'
            }
          }}
          contentLabel="ËÆæÂ§áÂêåÊ≠•ÁÆ°ÁêÜ"
        >
          <SyncManager 
            connectedDevices={[selectedDevice.device_code]}
            onClose={handleSyncManagerClose}
          />
        </Modal>
      )}
    </div>
  );
};

// ÂÜÖÈÉ®ÂÜÖÂÆπÁªÑ‰ª∂
const P2PInnerContent = ({ 
  deviceCode, 
  isInitialized, 
  connectedDevices, 
  targetDeviceCode, 
  setTargetDeviceCode, 
  status,
  handleConnect, 
  handleDisconnect,
  historyDevices
}) => {
  const [syncProgress, setSyncProgress] = useState(null);
  const [isConnected, setIsConnected] = useState(false);
  const [syncPhase, setSyncPhase] = useState('');
  const [syncDetails, setSyncDetails] = useState('');

  // ÁõëÂê¨ËøûÊé•Áä∂ÊÄÅÂèòÂåñ
  useEffect(() => {
    setIsConnected(connectedDevices.length > 0);
  }, [connectedDevices]);

  // ÁõëÂê¨ÂêåÊ≠•ËøõÂ∫¶
  useEffect(() => {
    const removeHandler = peerService.onSyncProgress((progress) => {
      console.log('Êî∂Âà∞ÂêåÊ≠•ËøõÂ∫¶:', progress);
      
      switch (progress.type) {
        // ÂçïÂêëÂêåÊ≠•ËøõÂ∫¶
        case 'db_start':
          setSyncPhase('Ê≠£Âú®ÂèëÈÄÅÊï∞ÊçÆÂ∫ì...');
          setSyncProgress(10);
          setSyncDetails('');
          break;
        case 'db_complete':
          setSyncPhase('Êï∞ÊçÆÂ∫ìÂèëÈÄÅÂÆåÊàê');
          setSyncProgress(30);
          break;
        case 'images_start':
          setSyncPhase('Ê≠£Âú®ÂèëÈÄÅÂõæÁâá...');
          setSyncProgress(35);
          setSyncDetails(`ÂÖ± ${progress.data.totalImages} Âº†ÂõæÁâá`);
          break;
        case 'image_progress':
          const imageProgress = 35 + (progress.data.current / progress.data.total) * 60; // 35-95%
          setSyncProgress(Math.round(imageProgress));
          setSyncDetails(`ÂèëÈÄÅËøõÂ∫¶: ${progress.data.current} / ${progress.data.total} Âº†ÂõæÁâá`);
          break;
        case 'images_complete':
          setSyncPhase('ÂõæÁâáÂèëÈÄÅÂÆåÊàê');
          setSyncProgress(95);
          break;
        case 'sync_complete':
          setSyncPhase('ÂçïÂêëÂêåÊ≠•ÂÆåÊàêÔºÅ');
          setSyncProgress(100);
          setSyncDetails('ÊâÄÊúâÊñá‰ª∂Â∑≤ÊàêÂäü‰º†Ëæì');
          break;
        case 'sync_error':
          setSyncPhase('ÂêåÊ≠•Â§±Ë¥•');
          setSyncProgress(null);
          setSyncDetails(progress.data.error || 'Êú™Áü•ÈîôËØØ');
          break;
        
        // ÂèåÂêëÂêåÊ≠•ËøõÂ∫¶
        case 'phase1_start':
          setSyncPhase('Èò∂ÊÆµ1ÔºöÊãâÂèñÂØπÊñπÊï∞ÊçÆ');
          setSyncProgress(10);
          setSyncDetails('ÂºÄÂßãÂèåÂêëÂêåÊ≠•ÊµÅÁ®ã...');
          break;
        case 'phase1_complete':
          setSyncPhase('Èò∂ÊÆµ1ÂÆåÊàê');
          setSyncProgress(50);
          setSyncDetails('Ê≠£Âú®Á≠âÂæÖÂØπÊñπÊãâÂèñÂêàÂπ∂ÁªìÊûú...');
          break;
        case 'phase2_start':
          setSyncPhase('Èò∂ÊÆµ2ÔºöÂØπÊñπÊ≠£Âú®ÊãâÂèñ');
          setSyncProgress(75);
          setSyncDetails('ÂØπÊñπÊ≠£Âú®Ëé∑ÂèñÂêàÂπ∂ÁªìÊûú...');
          break;
        case 'bidirectional_sync_complete':
          setSyncPhase('ÂèåÂêëÂêåÊ≠•ÂÆåÊàêÔºÅ');
          setSyncProgress(100);
          setSyncDetails('ÂèåÂêëÊï∞ÊçÆÂêåÊ≠•ÊàêÂäü');
          break;
        case 'bidirectional_sync_error':
          setSyncPhase('ÂèåÂêëÂêåÊ≠•Â§±Ë¥•');
          setSyncProgress(null);
          setSyncDetails(progress.data.error || 'ÂèåÂêëÂêåÊ≠•ËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ');
          break;
          
        // Êé•Êî∂ÊñπÁöÑËøõÂ∫¶‰∫ã‰ª∂
        case 'receive_start':
          setSyncPhase(`Ê≠£Âú®Êé•Êî∂${progress.data.fileType === 'database' ? 'Êï∞ÊçÆÂ∫ì' : 'ÂõæÁâá'}...`);
          setSyncProgress(10);
          setSyncDetails(progress.data.fileName || '');
          break;
        case 'receive_progress':
          setSyncProgress(progress.data.progress);
          break;
        case 'receive_complete':
          setSyncPhase('Êé•Êî∂ÂÆåÊàê');
          setSyncProgress(100);
          setSyncDetails(progress.data.fileName ? `Â∑≤Êé•Êî∂: ${progress.data.fileName}` : '');
          break;
        default:
          // ÂøΩÁï•ÂÖ∂‰ªñËøõÂ∫¶‰∫ã‰ª∂
          console.log('ÂøΩÁï•ËøõÂ∫¶‰∫ã‰ª∂:', progress.type);
          break;
      }
    });

    return removeHandler;
  }, []);

  const containerStyleInner = {
    maxWidth: '500px',
    width: '100%',
    margin: '0 auto',
    padding: '0'
  };

  const cardStyle = {
    padding: '32px',
    backgroundColor: 'white',
    borderRadius: '16px',
    border: 'none',
    textAlign: 'center',
    boxShadow: '0 4px 16px rgba(0, 0, 0, 0.1)'
  };

  const deviceCodeStyle = {
    fontFamily: 'monospace',
    fontSize: '36px',
    fontWeight: '700',
    color: '#4285f4',
    letterSpacing: '3px',
    marginBottom: '12px'
  };

  const inputStyleInner = {
    width: '100%',
    padding: '16px 20px',
    border: '2px solid #e8eaed',
    borderRadius: '12px',
    fontSize: '18px',
    textAlign: 'center',
    fontFamily: 'monospace',
    letterSpacing: '2px',
    marginBottom: '20px',
    backgroundColor: 'white',
    transition: 'border-color 0.3s ease'
  };

  const buttonStyleInner = {
    padding: '16px 32px',
    backgroundColor: '#4285f4',
    color: 'white',
    border: 'none',
    borderRadius: '12px',
    cursor: 'pointer',
    fontSize: '16px',
    fontWeight: '600',
    transition: 'all 0.3s ease',
    boxShadow: '0 4px 16px rgba(66, 133, 244, 0.3)',
    width: '100%'
  };

  const syncButtonStyle = {
    ...buttonStyleInner,
    backgroundColor: '#137333',
    fontSize: '16px',
    padding: '16px 24px',
    marginTop: '12px',
    flex: 1
  };

  const progressBarStyle = {
    width: '100%',
    height: '8px',
    backgroundColor: '#f1f3f4',
    borderRadius: '4px',
    marginTop: '16px',
    overflow: 'hidden'
  };

  const progressFillStyle = {
    height: '100%',
    backgroundColor: '#4285f4',
    borderRadius: '4px',
    transition: 'width 0.3s ease',
    width: syncProgress ? `${syncProgress}%` : '0%'
  };

  const handleStartSync = async () => {
    if (!connectedDevices || connectedDevices.length === 0) {
      console.error('Ê≤°ÊúâËøûÊé•ÁöÑËÆæÂ§á');
      return;
    }

    try {
      setSyncProgress(0);
      
      // ‰ΩøÁî®Á¨¨‰∏Ä‰∏™ËøûÊé•ÁöÑËÆæÂ§áÂºÄÂßãÂçïÂêëÂêåÊ≠•
      const targetDevice = connectedDevices[0];
      console.log('ÂºÄÂßãÂçïÂêëÂêåÊ≠•Âà∞ËÆæÂ§á:', targetDevice);
      
      await peerService.startSync(targetDevice);
    } catch (error) {
      console.error('ÂºÄÂßãÂçïÂêëÂêåÊ≠•Â§±Ë¥•:', error);
      setSyncProgress(null);
    }
  };

  // ÂèåÂêëÂêåÊ≠•Â§ÑÁêÜÂáΩÊï∞
  const handleStartBidirectionalSync = async () => {
    if (!connectedDevices || connectedDevices.length === 0) {
      console.error('Ê≤°ÊúâËøûÊé•ÁöÑËÆæÂ§á');
      return;
    }

    try {
      setSyncProgress(0);
      
      // ‰ΩøÁî®Á¨¨‰∏Ä‰∏™ËøûÊé•ÁöÑËÆæÂ§áÂºÄÂßãÂèåÂêëÂêåÊ≠•
      const targetDevice = connectedDevices[0];
      console.log('ÂºÄÂßãÂèåÂêëÂêåÊ≠•Âà∞ËÆæÂ§á:', targetDevice);
      
      await peerService.startBidirectionalSync(targetDevice);
    } catch (error) {
      console.error('ÂºÄÂßãÂèåÂêëÂêåÊ≠•Â§±Ë¥•:', error);
      setSyncProgress(null);
    }
  };

  const deviceCardStyle = {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
    padding: '12px 16px',
    margin: '6px',
    backgroundColor: '#4285f4',
    color: 'white',
    borderRadius: '12px',
    border: 'none',
    cursor: 'pointer',
    transition: 'all 0.3s ease',
    minWidth: '90px',
    boxShadow: '0 4px 16px rgba(66, 133, 244, 0.3)',
    fontSize: '14px',
    fontWeight: '500'
  };

  return (
    <div style={containerStyleInner}>
      <div style={cardStyle}>
        {/* 1. ÊòæÁ§∫ÂΩìÂâçËÆæÂ§áÁ†Å */}
        <h3 style={{marginTop: 0, marginBottom: '20px', color: '#333', fontSize: '20px', fontWeight: '600'}}>üì± ÂΩìÂâçËÆæÂ§áÁ†Å</h3>
        <div style={deviceCodeStyle}>{deviceCode || '------'}</div>
        <div style={{fontSize: '14px', color: '#5f6368', marginBottom: '40px'}}>
          ÂÖ∂‰ªñËÆæÂ§á‰ΩøÁî®Ê≠§‰ª£Á†ÅËøûÊé•
        </div>

        {/* 2. ÂéÜÂè≤ËÆæÂ§áÂç°ÁâáÂíåËøûÊé•ËæìÂÖ•Ê°Ü */}
        {!isConnected && (
          <>
            {/* ÂéÜÂè≤ËÆæÂ§áÂç°Áâá */}
            {historyDevices && historyDevices.length > 0 && (
              <div style={{marginBottom: '32px'}}>
                <h4 style={{margin: '0 0 16px 0', color: '#5f6368', fontSize: '14px', fontWeight: '500'}}>
                  ÂéÜÂè≤ËøûÊé•ËÆæÂ§á
                </h4>
                                 <div style={{
                   display: 'flex',
                   flexWrap: 'wrap',
                   justifyContent: 'center',
                   gap: '8px',
                   marginBottom: '24px'
                 }}>
                   {historyDevices.map((code) => (
                     <button
                       key={code}
                       onClick={() => handleConnect(code)}
                       style={deviceCardStyle}
                       disabled={!isInitialized}
                       onMouseOver={(e) => {
                         if (isInitialized) {
                           e.target.style.backgroundColor = '#3367d6';
                           e.target.style.transform = 'translateY(-2px)';
                         }
                       }}
                       onMouseOut={(e) => {
                         e.target.style.backgroundColor = '#4285f4';
                         e.target.style.transform = 'translateY(0px)';
                       }}
                     >
                       <div style={{fontFamily: 'monospace', fontSize: '16px', fontWeight: '600'}}>{code}</div>
                     </button>
                   ))}
                </div>
                <div style={{color: '#5f6368', fontSize: '12px', marginBottom: '20px'}}>
                  ÊàñËÄÖÊâãÂä®ËæìÂÖ•ËÆæÂ§á‰ª£Á†Å
                </div>
              </div>
            )}

            {/* ÊâãÂä®ËæìÂÖ• */}
            <div>
              <input
                type="text"
                placeholder="ËØ∑ËæìÂÖ•6‰ΩçËÆæÂ§á‰ª£Á†Å"
                value={targetDeviceCode}
                onChange={(e) => setTargetDeviceCode(e.target.value)}
                style={inputStyleInner}
                maxLength={6}
                pattern="[0-9]{6}"
                onKeyPress={(e) => e.key === 'Enter' && handleConnect()}
                onFocus={(e) => e.target.style.borderColor = '#4285f4'}
                onBlur={(e) => e.target.style.borderColor = '#e8eaed'}
              />
              <button 
                onClick={() => handleConnect()} 
                style={{
                  ...buttonStyleInner,
                  opacity: isInitialized ? 1 : 0.5
                }}
                disabled={!isInitialized}
                onMouseOver={(e) => {
                  if (isInitialized) {
                    e.target.style.backgroundColor = '#3367d6';
                    e.target.style.transform = 'translateY(-2px)';
                  }
                }}
                onMouseOut={(e) => {
                  e.target.style.backgroundColor = '#4285f4';
                  e.target.style.transform = 'translateY(0px)';
                }}
              >
                {isInitialized ? 'ËøûÊé•ËÆæÂ§á' : 'ÂàùÂßãÂåñ‰∏≠...'}
              </button>
            </div>
          </>
        )}

        {/* 3. ËøûÊé•ÊàêÂäüÂêéÊòæÁ§∫ÂêåÊ≠•ÂäüËÉΩ */}
        {isConnected && (
          <>
            <div style={{
              padding: '16px',
              backgroundColor: '#e8f5e8',
              border: '2px solid #137333',
              borderRadius: '12px',
              color: '#137333',
              marginBottom: '32px',
              fontSize: '16px',
              fontWeight: '500'
            }}>
              ‚úÖ Â∑≤ËøûÊé•Âà∞ËÆæÂ§á: {connectedDevices.join(', ')}
            </div>

            <div style={{
              display: 'flex',
              gap: '16px',
              marginTop: '24px',
              justifyContent: 'center'
            }}>
              <button 
                onClick={handleStartSync}
                style={{
                  ...syncButtonStyle,
                  backgroundColor: '#1a73e8'
                }}
                disabled={syncProgress !== null && syncProgress < 100}
                onMouseOver={(e) => {
                  if (!(syncProgress !== null && syncProgress < 100)) {
                    e.target.style.backgroundColor = '#1557b0';
                    e.target.style.transform = 'translateY(-2px)';
                  }
                }}
                onMouseOut={(e) => {
                  e.target.style.backgroundColor = '#1a73e8';
                  e.target.style.transform = 'translateY(0px)';
                }}
              >
                üì• ÂçïÂêëÂêåÊ≠•
              </button>
              <button 
                onClick={handleStartBidirectionalSync}
                style={{
                  ...syncButtonStyle,
                  backgroundColor: '#137333'
                }}
                disabled={syncProgress !== null && syncProgress < 100}
                onMouseOver={(e) => {
                  if (!(syncProgress !== null && syncProgress < 100)) {
                    e.target.style.backgroundColor = '#0d652d';
                    e.target.style.transform = 'translateY(-2px)';
                  }
                }}
                onMouseOut={(e) => {
                  e.target.style.backgroundColor = '#137333';
                  e.target.style.transform = 'translateY(0px)';
                }}
              >
                üîÑ ÂèåÂêëÂêåÊ≠•
              </button>
            </div>

            {syncProgress !== null && (
              <div style={{marginTop: '32px'}}>
                <div style={{marginBottom: '12px', fontSize: '14px', color: '#5f6368', fontWeight: '500'}}>
                  {syncPhase} {syncProgress}%
                </div>
                <div style={progressBarStyle}>
                  <div style={progressFillStyle}></div>
                </div>
                {syncDetails && (
                  <div style={{
                    marginTop: '12px',
                    fontSize: '12px',
                    color: '#5f6368'
                  }}>
                    {syncDetails}
                  </div>
                )}
                {syncProgress === 100 && (
                  <div style={{
                    marginTop: '16px',
                    color: '#137333',
                    fontWeight: '600',
                    fontSize: '16px'
                  }}>
                    ‚úÖ ÂêåÊ≠•ÂÆåÊàêÔºÅ
                  </div>
                )}
              </div>
            )}

            <div style={{marginTop: '24px'}}>
              <button 
                onClick={() => {
                  connectedDevices.forEach(deviceCode => handleDisconnect(deviceCode));
                  // ÈáçÁΩÆÂêåÊ≠•Áä∂ÊÄÅ
                  setSyncProgress(null);
                  setSyncPhase('');
                  setSyncDetails('');
                }}
                style={{
                  ...buttonStyleInner,
                  backgroundColor: '#ea4335',
                  fontSize: '14px',
                  padding: '12px 24px'
                }}
                onMouseOver={(e) => {
                  e.target.style.backgroundColor = '#d33b2c';
                  e.target.style.transform = 'translateY(-2px)';
                }}
                onMouseOut={(e) => {
                  e.target.style.backgroundColor = '#ea4335';
                  e.target.style.transform = 'translateY(0px)';
                }}
              >
                Êñ≠ÂºÄËøûÊé•
              </button>
        </div>
          </>
        )}
        
        {/* Â≠òÂÇ®Áä∂ÊÄÅÊòæÁ§∫ */}
        <div style={{ marginTop: '24px' }}>
          <StorageStatus />
        </div>
      </div>
    </div>
  );
};

export default P2PDemo; 